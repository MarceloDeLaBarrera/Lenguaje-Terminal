
pip install <nombrepaquete> .. o tambien : python -m pip install <nombrepaquete>
pip list --> ver listado de paquetes
pip show <nombre> --> ver mas datos

Generar documentacion en la misma consola:
python -m pydoc <ruta archivo>

Generar documentacion automatica en HTML:
python -m pydoc -w <ruta con archivo sin extension .py>


##################### CREACION DE ENTORNO VIRTUAL ###########################################
pip install virtualenv

Hay que posicionarse en carpeta donde se quiera crear entorno desde terminal de VSCODE.

virtualenv -p python3 env

#Activar entorno virtual para poder trabajar con y dentro de el.

.\env\Scripts\activate

#Si aparece un " (env) " previo a la ruta donde se ejecuta, es porque esta activado.


#Para ejecutar dentro del entorno:

python .\src\<nombre del archivo.py>

#Exportar los paquetes que estan dentro del entorno:
pip freeze > requirements.txt

#Si se cambia de pc, se puede crear un nuevo entorno en dicho pc, y se le pueden meter el src y requeriments.txt del pc anterior, para asi trasladar proyecto e instalar los paquetes necesarios para el enterno virtual. Entonces, una vez dentro del entorno:

pip install -r .\requirements.txt

#Desactivar entorno virtual:
deactivate


####### DJANGO #########
Iniciar proyecto Django. Se hace dentro del directorio en que se quiera inicializar el proyecto.
django-admin startproject <NombreProyecto>

Si se a√±ade un punto al final en la linea anterior, se crea proyecto dentro del mismo directorio sin crear un nuevo directorio para dicho proyecto.
django-admin startproject <NombreProyecto> . 

Crear una aplicacion dentro del proyecto... Se hace dentro del directorio creado para almacenar y trabajar con la aplicacion.
django-admin startapp <nombreapp>

Chequea el estado de una app, para ver si esta todo ok, o si encuentra errores.
python manage.py check <nombreapp>

Realiza migraciones de los modelos dentro de models.py, y crea la base de datos pero vacia...
python manage.py makemigrations                 

Crear migraciones vacias
python manage.py makemigrations <appname> --empty

Crear migracion con nombre
python manage.py makemigrations --name <nombremigracion>  <nombreapp (opcional)>

Revertir Migracion:
python manage.py migrate <my_app> <previous_number_migration> 

Borrar migraciones
python manage.py migrate <appname> zero

Transformar codigo python de models a querys:
python manage.py sqlmigrate <nombreapp> <numero de migracion dado en makemigrations>

Rellenar BBDD. Por defecto sqlite3... Se hace dentro del directorio del proyecto.
python manage.py migrate

Crear nuevo campo en modelo:
Al crear nuevo campo, asignar null y blank como True para que no tenga conflictos con registros previos, o asignar un valor default.

Como migrar un valor default a los registros ya existentes de una BD:
1.- Crear campo con valor default
2.- Crear migracion con makemigrations
3.- Crear migracion vacia con --> manage.py makemigrations --empty <app_name>
4.- Rellenar dicho archivo con:

from django.db import migrations

def set_default_value(apps, schema_editor):
    MyModel = apps.get_model('myapp', 'MyModel')
    MyModel.objects.filter(my_field=None).update(my_field='my_default_value')

class Migration(migrations.Migration):

    dependencies = [
        ('myapp', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(set_default_value),
    ]

5.- Aplicar migraciones con python manage.py migrate <app_name>

6.-



Generar backup de la BBDD en archivo .json con identado: (NOTA: Asegurarse de dejarlo configurado en UTF-8 en la parte inferior derecha)
python manage.py dumpdata --indent 2 > database.json

Cargar datos de BBDD: 
python manage.py loaddata database.json

si no funciona el anterior:
.\<nombreapp>\fixtures\database.json



Para iniciar servidor donde se monta el proyecto
python manage.py runserver

Para iniciar servidor pero con el archivo setting puesto dentro de una carpeta, ya sea local o produccion.
python manage.py runserver --settings=settings.local

Crear superuser para panel de administracion:
python manage.py createsuperuser

Entrar al modo shell (se hace posicionado en carpeta proyecto)
python manage.py shell

exit()
Salir del modo shell.


GENERAR SECRET KEYS DJANGO:
python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'


DJANGO QUERYS:

Para crear un objeto
Obj.objects.create()

Para obtener un objeto
Obj.objects.get()

Para obtener un queryset de un objetos
Obj.objects.filter()

Para obtener el equivalente en query de una queryset.
.query

Para obtener los valores de un campo de los objetos retornados en el queryset en forma de lista.
Obj.objects.filter(condition).values_list('<field>', flat=True)

Django queryset Filters:
<field>__lte => less than
<field>__gte => greather than
<field>__isnull => si es None o null
<foreignkey_field>__field ==> para acceder a los campos de la tabla de una llave foranea.
<field>__in ==> para ver si campo esta dentro de elementos de un listado.
<field>__contains ==> para ver si el valor del campo contiene "x" valor.



naranja, espinaca, acelga, tomate para vitaminas
te verde, cebolla para circulacion

